
# -- setup --------------------------------------

image: docker:latest

stages:
  - LAL
  - LALFrame
  - LALMetaIO
  - LALSimulation
  - LALBurst
  - LALInspiral
  - LALPulsar
  - LALInference
  - LALApps
  - lint
  - documentation
  - integration tests
  - compiler tests
  - platform tests
  - docker
  - wheels
  - deploy

variables:
  APT_GET: "apt-get -y -q -q -o dir::cache::archives=${CI_PROJECT_DIR}/.cache/apt"
  BRANCH: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  CONDA_BLD_PATH: "${CI_PROJECT_DIR}/conda/bld"
  CONDA_PKGS_DIRS: "${CI_PROJECT_DIR}/conda/pkgs"
  DOCKER_DRIVER: overlay
  GIT_DEPTH: 1
  LAL_DIR: $CI_PROJECT_DIR/opt/lalsuite
  NIGHTLY: $CI_REGISTRY_IMAGE:nightly
  TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  YUM: "yum -y -q --setopt=cachedir=${CI_PROJECT_DIR}/.cache/yum --setopt=keepcache=1"
  YUM_OPTS: "-y -q --setopt=cachedir=${CI_PROJECT_DIR}/.cache/yum --setopt=keepcache=1"

before_script:
  - set -x  # print commands as they are run (helps debugging)
  - ulimit -S -c 0
  - export VERBOSE="true"
  - export PATH=/usr/lib/ccache:/opt/local/libexec/ccache:$PATH
  - export CCACHE_DIR=${PWD}/ccache
  - export PKG_CONFIG_PATH=${LAL_DIR}/lib/pkgconfig
  - mkdir -p opt/lalsuite
  - if [ ${CI_PIPELINE_SOURCE} = "schedule" ] || [ ${CI_PIPELINE_SOURCE} = "web" ]; then EXTRA_CONFIG_FLAGS="--enable-nightly"; fi

cache:
  key: $CI_JOB_NAME
  paths:
    - ccache

.retry: &define-retry |
  retry() {
    local n=1
    local max=3
    local delay=15
    while true; do
      "$@" && break || {
        if [[ $n -lt $max ]]; then
          ((n++))
          echo "Command failed. Attempt $n/$max:"
          sleep $delay;
        else
          echo "The command has failed after $n attempts." 1>&2
          exit 1
        fi
      }
    done
  }

.top-level-build: &top-level-build
  script:
    - ./00boot
    - ./configure --enable-doxygen --enable-swig
    - make -j4 distcheck
  artifacts:
    reports:
      junit: "*/test/python/junit*.xml"

# -- build templates ----------------------------

# -- rpm

.yum-cache: &yum-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/yum

.yum-update: &yum-update
  yum-config-manager --disable htcondor 1>/dev/null && ${YUM} update

.rpmbuild: &rpmbuild
  <<: *yum-cache
  image: igwn/base:el7-testing
  variables:
    GIT_STRATEGY: none
    RPM_BUILD_CPUS: 4
  script:
    - PACKAGE=${CI_JOB_NAME%%:*}
    # install srpm dependencies
    - *yum-update
    - ${YUM} install lscsoft-packaging-tools
    # install upstream packages
    - if [ -d rpmbuild ]; then ${YUM} install rpmbuild/RPMS/x86_64/*.rpm; fi
    # build src.rpm
    - cd ${PACKAGE}/
    - TARBALL=$(ls -t1 ${PACKAGE}-*.tar.* | head -n1 | xargs readlink -f)
    - rpmbuild -ts --define "_topdir $CI_PROJECT_DIR/rpmbuild" ${TARBALL}
    - SRCRPM=${CI_PROJECT_DIR}/rpmbuild/SRPMS/${PACKAGE}-*.src.rpm
    # lint src.rpm
    - rpmlint ${SRCRPM}
    # install build dependencies
    - yum-builddep ${YUM_OPTS} ${SRCRPM}
    # build binary rpms and print details of what we got
    - rpmbuild --rebuild --define "_topdir $CI_PROJECT_DIR/rpmbuild" ${SRCRPM}
    - rpm -qilp ${CI_PROJECT_DIR}/rpmbuild/RPMS/*/*${PACKAGE}-*.rpm
    - rpm -qp --provides ${CI_PROJECT_DIR}/rpmbuild/RPMS/*/*${PACKAGE}-*.rpm
  artifacts:
    expire_in: 18h
    paths:
      - "rpmbuild/RPMS/x86_64/${CI_JOB_NAME%%:*}-*.rpm"
      - "rpmbuild/RPMS/x86_64/python*-${CI_JOB_NAME%%:*}-*.rpm"
    reports:
      junit: "rpmbuild/BUILD/*/test/python/junit*.xml"
  only:
    - pushes
    - schedules
    - tags
    - web


# -- debian

.apt-cache: &apt-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/apt

.apt-update: &apt-update
  mkdir -p "${CI_PROJECT_DIR}/.cache/apt/partial" &&
  ${APT_GET} autoclean &&
  ${APT_GET} update

.debuild: &debbuild
  <<: *apt-cache
  image: igwn/base:stretch-proposed
  variables:
    GIT_STRATEGY: none
  script:
    - PACKAGE=${CI_JOB_NAME%%:*}
    # install debs from artifacts
    - *apt-update
    - ${APT_GET} install
          devscripts
          dpkg-dev
          lintian
    - "ls *.deb &>/dev/null && { dpkg -i *.deb || { ${APT_GET} -f install; dpkg -i *.deb; } }"
    # create orig tarball
    - cd ${PACKAGE}/
    - TARBALL=$(ls -t1 ${PACKAGE}-*.tar.* | head -n1 | xargs readlink -f)
    - SUFFIX=$(basename $TARBALL | sed 's/.*\.\(tar\..*\)/\1/')
    - VERSION=$(basename $TARBALL | sed 's/[^-]*-\(.*\)\.tar\..*/\1/' | tr '-' '~')
    - cd ${CI_PROJECT_DIR}/
    - cp ${TARBALL} ${PACKAGE}_${VERSION}.orig.${SUFFIX}
    # update changelog
    - export DEBFULLNAME="GitLab"
    - export DEBEMAIL="gitlab@git.ligo.org"
    - tar -xf ${TARBALL}
    - cd ${PACKAGE}-*/
    - dch -v ${VERSION}-1 -b 'Rebuilt automatically on git.ligo.org CI'
    # install build dependencies
    - ${APT_GET} -q install devscripts
    - mk-build-deps --tool "${APT_GET}" --install --remove
    # build packages
    - debuild -us -uc -r
  artifacts:
    expire_in: 18h
    paths:
      - ${CI_JOB_NAME%%:*}*.changes
      - ${CI_JOB_NAME%%:*}*.deb
      - python*-${CI_JOB_NAME%%:*}*.deb
      - ${CI_JOB_NAME%%:*}*.dsc
      - ${CI_JOB_NAME%%:*}*.orig.*
    reports:
      junit: "${CI_JOB_NAME%%:*}*/.pybuild/python*/build/test/python/junit*.xml"
  only:
    - pushes
    - schedules
    - tags
    - web

# -- conda

.conda-init: &conda-init |
  # configure conda
  mkdir -p $(dirname ${CONDA_PKGS_DIRS})
  source /opt/conda/etc/profile.d/conda.sh
  conda config --set always_yes yes
  conda config --add channels conda-forge
  retry conda update -n base conda setuptools
  conda activate base
  retry conda install -n base "conda-build!=3.18.10" conda-verify conda-forge-pinning
  conda info --all

.conda-build: &conda-build
  image: igwn/base:conda
  variables:
    CONDA_BLD_PATH: "${CI_PROJECT_DIR}/conda/bld"
    CONDA_PKGS_DIRS: "${CI_PROJECT_DIR}/conda/pkgs"
    fft_impl: "fftw"
    PYTHON_VERSION: "3.7"
  before_script:
    - set -x  # print commands as they are run (helps debugging)
    - *define-retry
    - *conda-init
  script:
    - PACKAGE=${CI_JOB_NAME%%:*}
    - cd ${PACKAGE}/
    # render clobber YAML file to use our tarball
    - TARBALL=$(ls -t1 ${PACKAGE}-*.tar.* | head -n1 | xargs readlink -f)
    - VERSION=$(basename $TARBALL | sed 's/[^-]*-\(.*\)\.tar\..*/\1/' | tr '-' '.')
    - SHA256=$(openssl dgst -r -sha256 $TARBALL | cut -d\  -f1)
    - sed 's|@VERSION@|'${VERSION}'|g' conda/meta.yaml.in > conda/meta.yaml
    - sed -i 's|@TARBALL@|'${TARBALL}'|g' conda/meta.yaml
    - sed -i 's|@SHA256@|'${SHA256}'|g' conda/meta.yaml
    # build packages (preferring local packages over everything)
    - conda config --set channel_priority strict
    - conda build
          conda/
          --dirty
          --error-overlinking
          --error-overdepending
          --no-anaconda-upload
          --python ${PYTHON_VERSION}
          --use-local
          --variant-config-files $(conda info --base)/conda_build_config.yaml
          ${CONDA_BUILD_ARGS}
  artifacts:
    expire_in: 18h
    paths:
      - "conda/bld/linux-64/${CI_JOB_NAME%%:*}-*.conda"
      - "conda/bld/linux-64/${CI_JOB_NAME%%:*}-*.tar.bz2"
      - "conda/bld/linux-64/python-${CI_JOB_NAME%%:*}-*.conda"
      - "conda/bld/linux-64/python-${CI_JOB_NAME%%:*}-*.tar.bz2"
      - "conda/bld/${CI_JOB_NAME%%:*}_*/work/test/test-suite.log"
      - "conda/bld/${CI_JOB_NAME%%:*}_*/work/test/python/test-suite.log"
      - "conda/bld/${CI_JOB_NAME%%:*}_*/work/*/*/*/test-suite.log"
    reports:
      junit:
        - "conda/bld/${CI_JOB_NAME%%:*}_*/work/test/python/junit*.xml"
        - "conda/bld/${CI_JOB_NAME%%:*}_*/test_tmp/junit*.xml"
    when: always
  only:
    - pushes
    - schedules
    - tags
    - web
  cache:
    key: $CI_JOB_NAME
    paths:
      - conda/pkgs

# -- linting ------------------------------------

lint:python:
  stage: lint
  image: python
  needs: []
  before_script:
    - python -m pip install
          "flake8>=3.7.0"
          "flake8-junit-report"
  script:
    - python -m flake8 --output-file flake8.out
  after_script:
    - cat flake8.out
    - python -m junit_conversor flake8.out junit.xml
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/pip
  artifacts:
    expire_in: 1month
    reports:
      junit: junit.xml
    when: always

# -- documentation ------------------------------

documentation:
  image: igwn/lalsuite-dev:stretch-proposed
  stage: documentation
  needs: []
  script:
    - ./00boot
    - ./configure --enable-doxygen --prefix=${LAL_DIR}
    - make -j4 install-html
    - pushd ${LAL_DIR}/share/doc
    - cp lalsuite/index.html index.html
    - sed -i 's/..\/lal/lal/g' index.html
    - popd
  artifacts:
    expire_in: 18h
    paths:
      - ${LAL_DIR}/share/doc
  only:
    - pushes
    - web

pages:
  image: igwn/lalsuite-dev:stretch-proposed
  stage: deploy
  script:
    - ./00boot
    - ./configure --enable-doxygen --prefix=${LAL_DIR}
    - make -j4 install-html
    - cp -r ${LAL_DIR}/share/doc public/
    - pushd public
    - cp lalsuite/index.html index.html
    - sed -i 's/..\/lal/lal/g' index.html
    - popd
  needs: []
  artifacts:
    paths:
      - public
  only:
    - master@lscsoft/lalsuite
  except:
    - pushes
    - web

# -- tarballs -----------------------------------

# this job makes all of the source tarballs up-front using a top-level
# make dist call
#
# to use one (any) of the tarballs in another job, just add "make-dist"
# in `dependencies:`

make-dist:
  image: igwn/lalsuite-dev:el7
  stage: .pre
  script:
    - ./00boot
    - ./configure --enable-swig ${EXTRA_CONFIG_FLAGS}
    - for subdir in lal lalframe lalmetaio lalsimulation lalburst lalinspiral lalpulsar lalinference lalapps; do
        pushd ${subdir};
        make dist;
        popd;
      done
  artifacts:
    expire_in: 18h
    paths:
      - "*/*.tar.*"

# -- lal ----------------------------------------

lal:rpm:
  <<: *rpmbuild
  stage: LAL
  needs:
    - make-dist

lal:deb:
  <<: *debbuild
  stage: LAL
  needs:
    - make-dist

lal:conda:fftw:
  <<: *conda-build
  stage: LAL
  needs:
    - make-dist

lal:conda:mkl:
  <<: *conda-build
  stage: LAL
  needs:
    - make-dist
  variables:
    CONDA_BLD_PATH: "${CI_PROJECT_DIR}/conda/bld"
    CONDA_PKGS_DIRS: "${CI_PROJECT_DIR}/conda/pkgs"
    fft_impl: "mkl"
    PYTHON_VERSION: "3.7"

# -- lalframe------------------------------------

lalframe:rpm:
  <<: *rpmbuild
  stage: LALFrame
  needs:
    - make-dist
    - lal:rpm

lalframe:deb:
  <<: *debbuild
  stage: LALFrame
  needs:
    - make-dist
    - lal:deb

lalframe:conda:
  <<: *conda-build
  stage: LALFrame
  needs:
    - make-dist
    - lal:conda:fftw

# -- lalmetaio ----------------------------------

lalmetaio:rpm:
  <<: *rpmbuild
  stage: LALMetaIO
  needs:
    - make-dist
    - lal:rpm

lalmetaio:deb:
  <<: *debbuild
  stage: LALMetaIO
  needs:
    - make-dist
    - lal:deb

lalmetaio:conda:
  <<: *conda-build
  stage: LALMetaIO
  needs:
    - make-dist
    - lal:conda:fftw

# -- lalsimulation ------------------------------

lalsimulation:rpm:
  <<: *rpmbuild
  stage: LALSimulation
  needs:
    - make-dist
    - lal:rpm

lalsimulation:deb:
  <<: *debbuild
  stage: LALSimulation
  needs:
    - make-dist
    - lal:deb

lalsimulation:conda:
  <<: *conda-build
  stage: LALSimulation
  needs:
    - make-dist
    - lal:conda:fftw

# -- lalburst -----------------------------------

lalburst:rpm:
  <<: *rpmbuild
  stage: LALBurst
  needs:
    - make-dist
    - lal:rpm
    - lalmetaio:rpm
    - lalsimulation:rpm

lalburst:deb:
  <<: *debbuild
  stage: LALBurst
  needs:
    - make-dist
    - lal:deb
    - lalmetaio:deb
    - lalsimulation:deb

lalburst:conda:
  <<: *conda-build
  stage: LALBurst
  needs:
    - make-dist
    - lal:conda:fftw
    - lalmetaio:conda
    - lalsimulation:conda

# -- lalinspiral --------------------------------

lalinspiral:rpm:
  <<: *rpmbuild
  stage: LALInspiral
  needs:
    - make-dist
    - lal:rpm
    - lalframe:rpm
    - lalmetaio:rpm
    - lalsimulation:rpm
    - lalburst:rpm

lalinspiral:deb:
  <<: *debbuild
  stage: LALInspiral
  needs:
    - make-dist
    - lal:deb
    - lalframe:deb
    - lalmetaio:deb
    - lalsimulation:deb
    - lalburst:deb

lalinspiral:conda:
  <<: *conda-build
  stage: LALInspiral
  needs:
    - make-dist
    - lal:conda:fftw
    - lalframe:conda
    - lalmetaio:conda
    - lalsimulation:conda
    - lalburst:conda

# -- lalpulsar ----------------------------------

lalpulsar:rpm:
  <<: *rpmbuild
  stage: LALPulsar
  needs:
    - make-dist
    - lal:rpm

lalpulsar:deb:
  <<: *debbuild
  stage: LALPulsar
  needs:
    - make-dist
    - lal:deb

lalpulsar:conda:
  <<: *conda-build
  stage: LALPulsar
  needs:
    - make-dist
    - lal:conda:fftw

# -- lalinference -------------------------------

lalinference:rpm:
  <<: *rpmbuild
  stage: LALInference
  needs:
    - make-dist
    - lal:rpm
    - lalframe:rpm
    - lalmetaio:rpm
    - lalsimulation:rpm
    - lalburst:rpm
    - lalpulsar:rpm
    - lalinspiral:rpm

lalinference:deb:
  <<: *debbuild
  stage: LALInference
  needs:
    - make-dist
    - lal:deb
    - lalframe:deb
    - lalmetaio:deb
    - lalsimulation:deb
    - lalburst:deb
    - lalpulsar:deb
    - lalinspiral:deb

lalinference:conda:
  <<: *conda-build
  stage: LALInference
  needs:
    - make-dist
    - lal:conda:fftw
    - lalframe:conda
    - lalmetaio:conda
    - lalsimulation:conda
    - lalburst:conda
    - lalpulsar:conda
    - lalinspiral:conda

# -- lalapps ------------------------------------

lalapps:rpm:
  <<: *rpmbuild
  stage: LALApps
  needs:
    - make-dist
    - lal:rpm
    - lalframe:rpm
    - lalmetaio:rpm
    - lalsimulation:rpm
    - lalburst:rpm
    - lalpulsar:rpm
    - lalinspiral:rpm
    - lalinference:rpm

lalapps:deb:
  <<: *debbuild
  stage: LALApps
  needs:
    - make-dist
    - lal:deb
    - lalframe:deb
    - lalmetaio:deb
    - lalsimulation:deb
    - lalburst:deb
    - lalpulsar:deb
    - lalinspiral:deb
    - lalinference:deb

lalapps:conda:
  <<: *conda-build
  stage: LALApps
  needs:
    - make-dist
    - lal:conda:fftw
    - lalframe:conda
    - lalmetaio:conda
    - lalsimulation:conda
    - lalburst:conda
    - lalpulsar:conda
    - lalinspiral:conda
    - lalinference:conda

# -- integration tests --------------------------

lalinference_testjob:
  <<: *yum-cache
  stage: integration tests
  image: igwn/base:el7-testing
  before_script:
    - *yum-update
    - ${YUM} install
          git
          git-lfs
    - ${YUM} install rpmbuild/RPMS/x86_64/*.rpm
  script:
    - git lfs clone https://git.ligo.org/lscsoft/ROQ_data --include "**/params.dat,*/4s/**"
    - bash lalinference/test/lalinference_nestedSampling_integration_test.sh
  needs:
    - lal:rpm
    - lalframe:rpm
    - lalmetaio:rpm
    - lalsimulation:rpm
    - lalburst:rpm
    - lalpulsar:rpm
    - lalinspiral:rpm
    - lalinference:rpm
  only:
    - schedules
    - web
  artifacts:
    expire_in: 18h
    paths:
      - example/
    when: always

top-level:
  stage: integration tests
  image: igwn/lalsuite-dev:el7-testing
  needs: []
  <<: *top-level-build
  only:
    - pushes
    - schedules
    - web

# -- docker -------------------------------------

# build a nightly container from the RPMs
docker:nightly:el7:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add RPMs to directory to pass to docker
    - mkdir rpms && mv rpmbuild/RPMS/x86_64/*.rpm rpms
    - rm -rf rpmbuild*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/nightly:el7 --file .gitlab-ci-el7.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/nightly:el7
  needs:
    - lal:rpm
    - lalframe:rpm
    - lalmetaio:rpm
    - lalsimulation:rpm
    - lalburst:rpm
    - lalpulsar:rpm
    - lalinspiral:rpm
    - lalinference:rpm
    - lalapps:rpm
  only:
    - schedules

# build a tagged container from the rpms
docker:tags:el7:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add RPMs to directory to pass to docker
    - mkdir rpms && mv rpmbuild/RPMS/x86_64/*.rpm rpms
    - rm -rf rpmbuild*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:el7 --file .gitlab-ci-el7.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:el7
  needs:
    - lal:rpm
    - lalframe:rpm
    - lalmetaio:rpm
    - lalsimulation:rpm
    - lalburst:rpm
    - lalpulsar:rpm
    - lalinspiral:rpm
    - lalinference:rpm
    - lalapps:rpm
  only:
    - /^lalsuite-v.*$/

# build a nightly container from the debian packages
docker:nightly:stretch:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add deb packages to directory to pass to docker
    - mkdir debs && mv *.deb debs
    - rm *.changes *.dsc *.orig.*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/nightly:stretch --file .gitlab-ci-stretch.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/nightly:stretch
  needs:
    - lal:deb
    - lalframe:deb
    - lalmetaio:deb
    - lalsimulation:deb
    - lalburst:deb
    - lalpulsar:deb
    - lalinspiral:deb
    - lalinference:deb
    - lalapps:deb
  only:
    - schedules

# build a tagged container from the debian packages
docker:tags:stretch:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add deb packages to directory to pass to docker
    - mkdir debs && mv *.deb debs
    - rm *.changes *.dsc *.orig.*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:stretch --file .gitlab-ci-stretch.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:stretch
  needs:
    - lal:deb
    - lalframe:deb
    - lalmetaio:deb
    - lalsimulation:deb
    - lalburst:deb
    - lalpulsar:deb
    - lalinspiral:deb
    - lalinference:deb
    - lalapps:deb
  only:
    - /^lalsuite-v.*$/

# -- nightly ------------------------------------

# -- compilers

.clang-build: &clang-build
  stage: compiler tests
  needs: []
  script:
    - ./00boot
    - CC=${CLANG} CXX=${CLANGXX} ./configure --enable-swig --enable-doxygen
    - make -j4 distcheck
  only:
    - schedules
    - web
  artifacts:
    reports:
      junit: "*/test/python/junit*.xml"

clang:8:
  <<: *clang-build
  image: igwn/lalsuite-dev-clang:8
  variables:
    CLANG: clang-8
    CLANGXX: clang++-8

clang:9:
  <<: *clang-build
  image: igwn/lalsuite-dev-clang:9
  variables:
    CLANG: clang-9
    CLANGXX: clang++-9

clang:dev:
  <<: *clang-build
  image: igwn/lalsuite-dev-clang:dev
  variables:
    CLANG: clang
    CLANGXX: clang++

.gcc-build: &gcc-build
  stage: compiler tests
  needs: []
  script:
    - ./00boot
    - ./configure --enable-doxygen
    - make -j4 distcheck
  only:
    - schedules
    - web
  artifacts:
    reports:
      junit: "*/test/python/junit*.xml"

gcc:7:
  <<: *gcc-build
  image: igwn/lalsuite-dev-gcc:7

gcc:8:
  <<: *gcc-build
  image: igwn/lalsuite-dev-gcc:8

gcc:9:
  <<: *gcc-build
  image: igwn/lalsuite-dev-gcc:9

# -- debian

platform:debian:buster:
  image: igwn/lalsuite-dev:buster
  stage: platform tests
  needs: []
  <<: *top-level-build
  only:
    - schedules
    - web

# -- macOS

platform:macos:highsierra:
  tags:
    - macos_highsierra
  stage: platform tests
  script:
    - ./00boot
    # FIXME: disable building of Octave SWIG bindings until SWIG-4.0.0
    # is available
    - PYTHON=/opt/local/bin/python2.7 ./configure
    - make -j4
    - make -j4 check
  needs: []
  only:
    - schedules
    - web
  artifacts:
    reports:
      junit: "*/test/python/junit*.xml"

platform:macos:sierra:
  tags:
    - macos_sierra
  stage: platform tests
  script:
    - ./00boot
    # FIXME: disable building of Octave SWIG bindings until SWIG-4.0.0
    # is available
    - PYTHON=/opt/local/bin/python2.7 ./configure
    - make -j4
    - make -j4 check
  needs: []
  only:
    - schedules
    - web
  artifacts:
    reports:
      junit: "*/test/python/junit*.xml"

# -- wheels -------------------------------------

# Build receipe for standalone wheels on Linux
.wheel:manylinux: &wheel-manylinux
  # This container is derived from the official manylinux image provided by
  # python.org (see PEP 513 and PEP 571), and includes all of the LALSuite
  # build-dependencies.
  stage: wheels
  script:
    - PYPREFIX=/opt/python/$(echo ${CI_JOB_NAME} | sed 's/.*:\(.*\)-manylinux.*/\1/')
    # Build wheel
    - ./00boot
    - ./configure PYTHON=${PYPREFIX}/bin/python --enable-mpi ${EXTRA_CONFIG_FLAGS}
    - make -j4 wheel
    # Bundle and fix up dependent shared libraries
    - auditwheel repair wheel/*.whl
    # Test: do some simple sanity checks in a virtualenv
    - ${PYPREFIX}/bin/virtualenv test
    - source test/bin/activate
    - pip install wheelhouse/*
    - python -c 'import lal, lalframe, lalmetaio, lalsimulation; series = lal.CreateREAL8FrequencySeries("psd", 0, 0, 1, None, 4096); lalsimulation.SimNoisePSDaLIGOAPlusDesignSensitivityT1800042(series, 10)'
  needs: []
  only:
    - /^lalsuite-v.*$/
    - schedules
  artifacts:
    expire_in: 18h
    paths:
      - wheelhouse

# Build receipe for standalone wheels on macOS
.wheel:macos: &wheel-macos
  tags:
    - macos_sierra
  stage: wheels
  script:
    - PYVERS=$(echo ${CI_JOB_NAME} | sed 's/.*:cp\(.\)\(.\).*/\1.\2/')
    # Enter virtualenv so that we have a controlled version of Numpy
    - virtualenv-${PYVERS} env
    - source env/bin/activate
    - python -m pip install
          git+https://github.com/lpsinger/delocate@fix-duplicate-libs
          glob2
          'numpy==1.7.0;python_version<"3.7"'
          'numpy==1.14.5;python_version=="3.7"'
          'numpy==1.17.3;python_version=="3.8"'
    # Build wheel
    - ./00boot
    - ./configure PYTHON=$(which python${PYVERS}) --enable-mpi --enable-swig-python ${EXTRA_CONFIG_FLAGS} LDFLAGS=-Wl,-headerpad_max_install_names
    - make -j4 wheel
    # Bundle and fix up dependent shared libraries
    - delocate-wheel -v -w wheelhouse wheel/*.whl
    # Test: do some simple sanity checks in a virtualenv
    - virtualenv-${PYVERS} test
    - source test/bin/activate
    - python -m pip install wheelhouse/*
    - python -c 'import lal, lalframe, lalmetaio, lalsimulation; series = lal.CreateREAL8FrequencySeries("psd", 0, 0, 1, None, 4096); lalsimulation.SimNoisePSDaLIGOAPlusDesignSensitivityT1800042(series, 10)'
  needs: []
  only:
    - /^lalsuite-v.*$/
    - schedules
  artifacts:
    expire_in: 18h
    paths:
      - wheelhouse

.wheel:manylinux1: &wheel-manylinux1
  <<: *wheel-manylinux
  image: containers.ligo.org/lscsoft/lalsuite-manylinux/manylinux1_x86_64

.wheel:manylinux2014: &wheel-manylinux2014
  <<: *wheel-manylinux
  image: containers.ligo.org/lscsoft/lalsuite-manylinux/manylinux2014_x86_64

# Build wheels for all supported platforms
wheel:cp27-cp27m-manylinux1:
  <<: *wheel-manylinux1
wheel:cp27-cp27mu-manylinux1:
  <<: *wheel-manylinux1
wheel:cp35-cp35m-manylinux1:
  <<: *wheel-manylinux1
wheel:cp36-cp36m-manylinux1:
  <<: *wheel-manylinux1
wheel:cp37-cp37m-manylinux1:
  <<: *wheel-manylinux1
wheel:cp38-cp38-manylinux1:
  <<: *wheel-manylinux1
wheel:cp35-cp35m-manylinux2014:
  <<: *wheel-manylinux2014
wheel:cp36-cp36m-manylinux2014:
  <<: *wheel-manylinux2014
wheel:cp37-cp37m-manylinux2014:
  <<: *wheel-manylinux2014
wheel:cp38-cp38-manylinux2014:
  <<: *wheel-manylinux2014
wheel:cp27-cp27m-macosx:
  <<: *wheel-macos
wheel:cp35-cp35m-macosx:
  <<: *wheel-macos
wheel:cp36-cp36m-macosx:
  <<: *wheel-macos
wheel:cp37-cp37m-macosx:
  <<: *wheel-macos
wheel:cp38-cp38-macosx:
  <<: *wheel-macos

deploy:wheel:
  stage: deploy
  image: python
  variables:
    GIT_STRATEGY: none
  script:
    # exit if we're not running in the main namespace
    - if [[ ${CI_PROJECT_PATH} != "lscsoft/lalsuite" ]]; then echo "Not deploying."; exit 0; fi
    # TWINE_USERNAME and TWINE_PASSWORD are provided by CI secret variables
    - pip install twine
    - twine upload wheelhouse/*
  needs:
    - wheel:cp27-cp27m-manylinux1
    - wheel:cp27-cp27mu-manylinux1
    - wheel:cp35-cp35m-manylinux1
    - wheel:cp36-cp36m-manylinux1
    - wheel:cp37-cp37m-manylinux1
    - wheel:cp38-cp38-manylinux1
    - wheel:cp35-cp35m-manylinux2014
    - wheel:cp36-cp36m-manylinux2014
    - wheel:cp37-cp37m-manylinux2014
    - wheel:cp38-cp38-manylinux2014
    - wheel:cp27-cp27m-macosx
    - wheel:cp35-cp35m-macosx
    - wheel:cp36-cp36m-macosx
    - wheel:cp37-cp37m-macosx
    - wheel:cp38-cp38-macosx
  only:
    - /^lalsuite-v.*$/
    - schedules
