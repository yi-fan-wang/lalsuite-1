image: docker:latest

variables:
  DOCKER_DRIVER: overlay
#  GIT_DEPTH: 1
  BRANCH: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  NIGHTLY: $CI_REGISTRY_IMAGE:nightly
  TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  LAL_DIR: $CI_PROJECT_DIR/opt/lalsuite
  CONDA_BLD_PATH: "${CI_PROJECT_DIR}/conda/bld"
  CONDA_PKGS_DIRS: "${CI_PROJECT_DIR}/conda/pkgs"

stages:
  - dist
  - level0
  - level1
  - level2
  - level3
  - level4
  - level5
  - docker
  - nightly
  - wheels
  - deploy

before_script:
  - set -x  # print commands as they are run (helps debugging)
  - ulimit -S -c 0
  - export VERBOSE="true"
  - export PATH=/usr/lib/ccache:/opt/local/libexec/ccache:$PATH
  - export CCACHE_DIR=${PWD}/ccache
  - export PKG_CONFIG_PATH=${LAL_DIR}/lib/pkgconfig
  - mkdir -p opt/lalsuite
  - if [ ${CI_PIPELINE_SOURCE} = "schedule" ] || [ ${CI_PIPELINE_SOURCE} = "web" ]; then EXTRA_CONFIG_FLAGS="--enable-nightly"; fi

cache:
  key: $CI_JOB_NAME
  paths:
    - ccache

#
# ci documentation
#

documentation:
  image: igwn/lalsuite-dev:stretch
  stage: level0
  script:
    - ./00boot
    - ./configure --enable-doxygen --prefix=${LAL_DIR}
    - make -j4 install-html
    - pushd ${LAL_DIR}/share/doc
    - cp lalsuite/index.html index.html
    - sed -i 's/..\/lal/lal/g' index.html
    - popd
  artifacts:
    expire_in: 18h
    paths:
      - ${LAL_DIR}/share/doc
  only:
    - pushes
    - web

#
# make dist
#

# this job makes all of the source tarballs up-front using a top-level
# make dist call
#
# to use one (any) of the tarballs in another job, just add "make-dist"
# in `dependencies:`

make-dist:
  image: igwn/lalsuite-dev:el7
  stage: dist
  script:
    - ./00boot
    - ./configure --enable-swig ${EXTRA_CONFIG_FLAGS}
    - for subdir in lal lalframe lalmetaio lalsimulation lalburst lalinspiral lalpulsar lalinference lalapps; do
        pushd ${subdir};
        make dist;
        popd;
      done
  artifacts:
    expire_in: 18h
    paths:
      - "*/*.tar.*"

#
# build rpms
#

.levelN:rpm: &levelN-rpm-package
  image: igwn/lalsuite-dev:el7
  variables:
    GIT_STRATEGY: none
    RPM_BUILD_CPUS: 4
  script:
    - 'PACKAGE=$(echo ${CI_JOB_NAME} | cut -d\: -f3)'
    # install upstream packages
    - if [ -d rpmbuild ]; then yum -y install rpmbuild/RPMS/x86_64/*.rpm; fi
    # build src.rpm
    - cd ${PACKAGE}/
    - TARBALL=$(ls -t1 ${PACKAGE}-*.tar.* | head -n1 | xargs readlink -f)
    - rpmbuild -ts --define "_topdir $CI_PROJECT_DIR/rpmbuild" ${TARBALL}
    - SRCRPM=${CI_PROJECT_DIR}/rpmbuild/SRPMS/${CI_JOB_NAME#level?:rpm:}-*.src.rpm
    # lint src.rpm
    - rpmlint ${SRCRPM}
    # install build dependencies
    - yum -y install yum-utils
    - yum-builddep -y -q ${SRCRPM}
    # build binary rpms and print details of what we got
    - rpmbuild --rebuild --define "_topdir $CI_PROJECT_DIR/rpmbuild" ${SRCRPM}
    - rpm -qilp ${CI_PROJECT_DIR}/rpmbuild/RPMS/*/*${CI_JOB_NAME#level?:rpm:}-*.rpm
    - rpm -qp --provides ${CI_PROJECT_DIR}/rpmbuild/RPMS/*/*${CI_JOB_NAME#level?:rpm:}-*.rpm
  artifacts:
    expire_in: 18h
    paths:
      - rpmbuild/RPMS/x86_64/${CI_JOB_NAME#level?:rpm:}-*.rpm
      - rpmbuild/RPMS/x86_64/python*-${CI_JOB_NAME#level?:rpm:}-*.rpm
  only:
    - pushes
    - schedules
    - tags
    - web

level0:rpm:lal:
  <<: *levelN-rpm-package
  stage: level0
  dependencies:
    - make-dist

level1:rpm:lalframe:
  <<: *levelN-rpm-package
  stage: level1
  dependencies:
    - make-dist
    - level0:rpm:lal

level1:rpm:lalmetaio:
  <<: *levelN-rpm-package
  stage: level1
  dependencies:
    - make-dist
    - level0:rpm:lal

level1:rpm:lalsimulation:
  <<: *levelN-rpm-package
  stage: level1
  dependencies:
    - make-dist
    - level0:rpm:lal

level2:rpm:lalburst:
  <<: *levelN-rpm-package
  stage: level2
  dependencies:
    - make-dist
    - level0:rpm:lal
    - level1:rpm:lalmetaio
    - level1:rpm:lalsimulation

level2:rpm:lalpulsar:
  <<: *levelN-rpm-package
  stage: level2
  dependencies:
    - make-dist
    - level0:rpm:lal

level3:rpm:lalinspiral:
  <<: *levelN-rpm-package
  stage: level3
  dependencies:
    - make-dist
    - level0:rpm:lal
    - level1:rpm:lalframe
    - level1:rpm:lalmetaio
    - level1:rpm:lalsimulation
    - level2:rpm:lalburst

level4:rpm:lalinference:
  <<: *levelN-rpm-package
  stage: level4
  dependencies:
    - make-dist
    - level0:rpm:lal
    - level1:rpm:lalframe
    - level1:rpm:lalmetaio
    - level1:rpm:lalsimulation
    - level2:rpm:lalburst
    - level2:rpm:lalpulsar
    - level3:rpm:lalinspiral

level5:rpm:lalapps:
  <<: *levelN-rpm-package
  stage: level5
  dependencies:
    - make-dist
    - level0:rpm:lal
    - level1:rpm:lalframe
    - level1:rpm:lalmetaio
    - level1:rpm:lalsimulation
    - level2:rpm:lalburst
    - level2:rpm:lalpulsar
    - level3:rpm:lalinspiral
    - level4:rpm:lalinference

#integration tests
#
lalinference_testjob:
  stage: nightly
  image: igwn/lalsuite-dev:el7
  before_script:
    - yum -y install rpmbuild/RPMS/x86_64/*.rpm
  script:
    - git lfs clone https://git.ligo.org/lscsoft/ROQ_data --include "**/params.dat,*/4s/**"
    - bash lalinference/test/lalinference_nestedSampling_integration_test.sh
  dependencies:
    - level0:rpm:lal
    - level1:rpm:lalframe
    - level1:rpm:lalmetaio
    - level1:rpm:lalsimulation
    - level2:rpm:lalburst
    - level2:rpm:lalpulsar
    - level3:rpm:lalinspiral
    - level4:rpm:lalinference
    - level5:rpm:lalapps
  only:
    - schedules
    - web
#
# docker container from RPMs
#

# build a nightly container from the RPMs
docker:nightly:el7:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add RPMs to directory to pass to docker
    - mkdir rpms && mv rpmbuild/RPMS/x86_64/*.rpm rpms
    - rm -rf rpmbuild*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/nightly:el7 --file .gitlab-ci-el7.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/nightly:el7
  dependencies:
    - level0:rpm:lal
    - level1:rpm:lalframe
    - level1:rpm:lalmetaio
    - level1:rpm:lalsimulation
    - level2:rpm:lalburst
    - level2:rpm:lalpulsar
    - level3:rpm:lalinspiral
    - level4:rpm:lalinference
    - level5:rpm:lalapps
  only:
    - schedules

# build a tagged container from the rpms
docker:tags:el7:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add RPMs to directory to pass to docker
    - mkdir rpms && mv rpmbuild/RPMS/x86_64/*.rpm rpms
    - rm -rf rpmbuild*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:el7 --file .gitlab-ci-el7.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:el7
  dependencies:
    - level0:rpm:lal
    - level1:rpm:lalframe
    - level1:rpm:lalmetaio
    - level1:rpm:lalsimulation
    - level2:rpm:lalburst
    - level2:rpm:lalpulsar
    - level3:rpm:lalinspiral
    - level4:rpm:lalinference
    - level5:rpm:lalapps
  only:
    - /^lalsuite-v.*$/

#
# build debs
#

.levelN:deb: &levelN-deb-package
  image: igwn/lalsuite-dev:stretch
  variables:
    GIT_STRATEGY: none
  script:
    - 'PACKAGE=$(echo ${CI_JOB_NAME} | cut -d\: -f3)'
    # install debs from artifacts
    - dpkg -i *.deb || true
    # create orig tarball
    - cd ${PACKAGE}/
    - TARBALL=$(ls -t1 ${PACKAGE}-*.tar.* | head -n1 | xargs readlink -f)
    - SUFFIX=$(basename $TARBALL | sed 's/.*\.\(tar\..*\)/\1/')
    - VERSION=$(basename $TARBALL | sed 's/[^-]*-\(.*\)\.tar\..*/\1/' | tr '-' '~')
    - cd ${CI_PROJECT_DIR}/
    - cp ${TARBALL} ${PACKAGE}_${VERSION}.orig.${SUFFIX}
    # update changelog
    - export DEBFULLNAME="GitLab"
    - export DEBEMAIL="gitlab@git.ligo.org"
    - tar -xf ${TARBALL}
    - cd ${PACKAGE}-*/
    - dch -v ${VERSION}-1 -b 'Rebuilt automatically on git.ligo.org CI'
    # install build dependencies
    - apt-get -y -q install devscripts
    - mk-build-deps --tool "apt-get -y" --install --remove
    # build packages
    - debuild -us -uc -r
  artifacts:
    expire_in: 18h
    paths:
      - ${CI_JOB_NAME#level?:deb:}*.changes
      - ${CI_JOB_NAME#level?:deb:}*.deb
      - python*-${CI_JOB_NAME#level?:deb:}*.deb
      - ${CI_JOB_NAME#level?:deb:}*.dsc
      - ${CI_JOB_NAME#level?:deb:}*.orig.*
  only:
    - pushes
    - schedules
    - tags
    - web

level0:deb:lal:
  <<: *levelN-deb-package
  stage: level0

level1:deb:lalframe:
  <<: *levelN-deb-package
  stage: level1
  dependencies:
    - make-dist
    - level0:deb:lal

level1:deb:lalmetaio:
  <<: *levelN-deb-package
  stage: level1
  dependencies:
    - make-dist
    - level0:deb:lal

level1:deb:lalsimulation:
  <<: *levelN-deb-package
  stage: level1
  dependencies:
    - make-dist
    - level0:deb:lal

level2:deb:lalburst:
  <<: *levelN-deb-package
  stage: level2
  dependencies:
    - make-dist
    - level0:deb:lal
    - level1:deb:lalmetaio
    - level1:deb:lalsimulation

level2:deb:lalpulsar:
  <<: *levelN-deb-package
  stage: level2
  dependencies:
    - make-dist
    - level0:deb:lal

level3:deb:lalinspiral:
  <<: *levelN-deb-package
  stage: level3
  dependencies:
    - make-dist
    - level0:deb:lal
    - level1:deb:lalframe
    - level1:deb:lalmetaio
    - level1:deb:lalsimulation
    - level2:deb:lalburst

level4:deb:lalinference:
  <<: *levelN-deb-package
  stage: level4
  dependencies:
    - make-dist
    - level0:deb:lal
    - level1:deb:lalframe
    - level1:deb:lalmetaio
    - level1:deb:lalsimulation
    - level2:deb:lalburst
    - level2:deb:lalpulsar
    - level3:deb:lalinspiral

level5:deb:lalapps:
  <<: *levelN-deb-package
  stage: level5
  dependencies:
    - make-dist
    - level0:deb:lal
    - level1:deb:lalframe
    - level1:deb:lalmetaio
    - level1:deb:lalsimulation
    - level2:deb:lalburst
    - level2:deb:lalpulsar
    - level3:deb:lalinspiral
    - level4:deb:lalinference

#
# docker container from the debs
#

# build a nightly container from the debian packages
docker:nightly:stretch:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add deb packages to directory to pass to docker
    - mkdir debs && mv *.deb debs
    - rm *.changes *.dsc *.orig.*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/nightly:stretch --file .gitlab-ci-stretch.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/nightly:stretch
  dependencies:
    - level0:deb:lal
    - level1:deb:lalframe
    - level1:deb:lalmetaio
    - level1:deb:lalsimulation
    - level2:deb:lalburst
    - level2:deb:lalpulsar
    - level3:deb:lalinspiral
    - level4:deb:lalinference
    - level5:deb:lalapps
  only:
    - schedules

# build a tagged container from the debian packages
docker:tags:stretch:
  stage: docker
  before_script: []
  script:
    - set -x  # print commands as they are run (helps debugging)
    # add deb packages to directory to pass to docker
    - mkdir debs && mv *.deb debs
    - rm *.changes *.dsc *.orig.*
    # build container and push to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:stretch --file .gitlab-ci-stretch.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_TAG:stretch
  dependencies:
    - level0:deb:lal
    - level1:deb:lalframe
    - level1:deb:lalmetaio
    - level1:deb:lalsimulation
    - level2:deb:lalburst
    - level2:deb:lalpulsar
    - level3:deb:lalinspiral
    - level4:deb:lalinference
    - level5:deb:lalapps
  only:
    - /^lalsuite-v.*$/

#
# build conda packages
#

.retry: &define-retry |
  retry() {
    local n=1
    local max=3
    local delay=15
    while true; do
      "$@" && break || {
        if [[ $n -lt $max ]]; then
          ((n++))
          echo "Command failed. Attempt $n/$max:"
          sleep $delay;
        else
          echo "The command has failed after $n attempts." 1>&2
          exit 1
        fi
      }
    done
  }

.conda-init: &conda-init |
  # configure conda
  mkdir -p $(dirname ${CONDA_PKGS_DIRS})
  source /opt/conda/etc/profile.d/conda.sh
  conda config --set always_yes yes
  conda config --add channels conda-forge
  retry conda update -n base conda setuptools
  conda activate base
  retry conda install -n base "conda-build!=3.18.10" conda-verify conda-forge-pinning
  conda info --all

.levelN:conda: &levelN-conda-package
  image: igwn/base:conda
  variables:
    CONDA_BLD_PATH: "${CI_PROJECT_DIR}/conda/bld"
    CONDA_PKGS_DIRS: "${CI_PROJECT_DIR}/conda/pkgs"
    fft_impl: "fftw"
  before_script:
    - set -x  # print commands as they are run (helps debugging)
    - *define-retry
    - *conda-init
    - retry conda install openssl
  script:
    - 'PACKAGE=$(echo ${CI_JOB_NAME} | cut -d\: -f3)'
    - cd ${PACKAGE}/
    # render clobber YAML file to use our tarball
    - TARBALL=$(ls -t1 ${PACKAGE}-*.tar.* | head -n1 | xargs readlink -f)
    - VERSION=$(basename $TARBALL | sed 's/[^-]*-\(.*\)\.tar\..*/\1/' | tr '-' '.')
    - SHA256=$(openssl dgst -r -sha256 $TARBALL | cut -d\  -f1)
    - sed 's|@VERSION@|'${VERSION}'|g' conda/meta.yaml.in > conda/meta.yaml
    - sed -i 's|@TARBALL@|'${TARBALL}'|g' conda/meta.yaml
    - sed -i 's|@SHA256@|'${SHA256}'|g' conda/meta.yaml
    # build packages
    #     render first to dump the final YAML (for debugging)
    #     then build as normal
    - for _cmd in render build; do
          conda ${_cmd}
              conda/
              --error-overlinking
              --error-overdepending
              --no-anaconda-upload
              --python 3.7
              --use-local
              --variant-config-files $(conda info --base)/conda_build_config.yaml
              ${CONDA_BUILD_ARGS};
      done
  artifacts:
    expire_in: 18h
    paths:
      - "conda/bld/linux-64/$(cut -d: -f3 <<<${CI_JOB_NAME})-*.conda"
      - "conda/bld/linux-64/$(cut -d: -f3 <<<${CI_JOB_NAME})-*.tar.bz2"
      - "conda/bld/linux-64/python-$(cut -d: -f3 <<<${CI_JOB_NAME})-*.conda"
      - "conda/bld/linux-64/python-$(cut -d: -f3 <<<${CI_JOB_NAME})-*.tar.bz2"
      - "conda/bld/$(cut -d: -f3 <<<${CI_JOB_NAME})_*/work/test/test-suite.log"
      - "conda/bld/$(cut -d: -f3 <<<${CI_JOB_NAME})_*/work/test/python/test-suite.log"
      - "conda/bld/$(cut -d: -f3 <<<${CI_JOB_NAME})_*/work/*/*/*/test-suite.log"
    when: always
  only:
    - pushes
    - schedules
    - tags
    - web
  cache:
    key: $CI_JOB_NAME
    paths:
      - conda/pkgs

level0:conda:lal:
  <<: *levelN-conda-package
  stage: level0
  dependencies:
    - make-dist

level1:conda:lalframe:
  <<: *levelN-conda-package
  stage: level1
  dependencies:
    - make-dist
    - level0:conda:lal

level1:conda:lalmetaio:
  <<: *levelN-conda-package
  stage: level1
  dependencies:
    - make-dist
    - level0:conda:lal

level1:conda:lalsimulation:
  <<: *levelN-conda-package
  stage: level1
  dependencies:
    - make-dist
    - level0:conda:lal

level2:conda:lalburst:
  <<: *levelN-conda-package
  stage: level2
  dependencies:
    - make-dist
    - level0:conda:lal
    - level1:conda:lalmetaio
    - level1:conda:lalsimulation

level2:conda:lalpulsar:
  <<: *levelN-conda-package
  stage: level2
  dependencies:
    - make-dist
    - level0:conda:lal

level3:conda:lalinspiral:
  <<: *levelN-conda-package
  stage: level3
  dependencies:
    - make-dist
    - level0:conda:lal
    - level1:conda:lalframe
    - level1:conda:lalmetaio
    - level1:conda:lalsimulation
    - level2:conda:lalburst

level4:conda:lalinference:
  <<: *levelN-conda-package
  stage: level4
  dependencies:
    - make-dist
    - level0:conda:lal
    - level1:conda:lalframe
    - level1:conda:lalmetaio
    - level1:conda:lalsimulation
    - level2:conda:lalburst
    - level2:conda:lalpulsar
    - level3:conda:lalinspiral

level5:conda:lalapps:
  <<: *levelN-conda-package
  stage: level5
  dependencies:
    - make-dist
    - level0:conda:lal
    - level1:conda:lalframe
    - level1:conda:lalmetaio
    - level1:conda:lalsimulation
    - level2:conda:lalburst
    - level2:conda:lalpulsar
    - level3:conda:lalinspiral
    - level4:conda:lalinference

#
# nightly builds
#

# compilers

.clang-build: &clang-build
  stage: nightly
  dependencies: []
  script:
    - ./00boot
    - CC=${CLANG} CXX=${CLANGXX} ./configure --enable-swig --enable-doxygen
    - make -j4 distcheck
  only:
    - schedules
    - web

nightly:clang:8:
  <<: *clang-build
  image: igwn/lalsuite-dev-clang:8
  variables:
    CLANG: clang-8
    CLANGXX: clang++-8
  allow_failure: true

nightly:clang:9:
  <<: *clang-build
  image: igwn/lalsuite-dev-clang:9
  variables:
    CLANG: clang-9
    CLANGXX: clang++-9
  allow_failure: true

nightly:clang:dev:
  <<: *clang-build
  image: igwn/lalsuite-dev-clang:dev
  variables:
    CLANG: clang
    CLANGXX: clang++
  allow_failure: true

.gcc-build: &gcc-build
  stage: nightly
  dependencies: []
  script:
    - ./00boot
    - ./configure --enable-doxygen
    - make -j4 distcheck
  only:
    - schedules
    - web

nightly:gcc:7:
  <<: *gcc-build
  image: igwn/lalsuite-dev-gcc:7
  allow_failure: true

nightly:gcc:8:
  <<: *gcc-build
  image: igwn/lalsuite-dev-gcc:8
  allow_failure: true

nightly:gcc:9:
  <<: *gcc-build
  image: igwn/lalsuite-dev-gcc:9
  allow_failure: true

# conda

# FIXME: currently using --disable-doxygen as documentation currently
# fails to build under Conda

# FIXME: there currently seems to be an issue with performing FFTs using
# the MKL libraries, disable the use of MKL until this is understood
# https://git.ligo.org/lscsoft/lalsuite/issues/161

.conda-build: &conda-build
  stage: nightly
  dependencies: []
  before_script:
    - set -x  # print commands as they are run (helps debugging)
    # determine conda environment
    - PYVERSION=$(echo ${CI_JOB_NAME} | sed 's/conda:python//')
    - CONDA_ENV_FILE="conda/environment-lal-development-py${PYVERSION}.yml"
    # configure conda
    - *define-retry
    - *conda-init
    # build lalsuite environment
    - conda env create -f ${CONDA_ENV_FILE}
    - conda activate lal-development-py${PYVERSION}
    # hack the build to get LDFLAGS set properly
    - export PREFIX="${CONDA_PREFIX}"
    - export CONDA_BUILD="1"
    - set +o pipefail  # one of the deactivate scripts pipefails
    - conda activate lal-development-py${PYVERSION}
    - set -o pipefail
    - conda list
  script:
    # build lalsuite
    - ./00boot
    - ./configure --disable-doxygen
    - make -j4 distcheck
  only:
    - schedules
    - web
  cache:
    key: $CI_JOB_NAME
    paths:
      - conda/pkgs
  artifacts:
    paths:
      - "config.log"
      - "*/config.log"
      - "*/test/test-suite.log"
      - "*/test/python/test-suite.log"
      - "*/*/*/*/test/test-suite.log"
    when: on_failure
  allow_failure: true

conda:python27:
  <<: *conda-build
  image: continuumio/miniconda2

conda:python36:
  <<: *conda-build
  image: continuumio/miniconda3

conda:python37:
  <<: *conda-build
  image: continuumio/miniconda3

# debian

# FIXME: Disable building of Octave SWIG bindings until SWIG-4.0.0 is
# available
# FIXME: allow failure due to #124
nightly:debian:buster:
  image: igwn/lalsuite-dev:buster
  stage: nightly
  dependencies: []
  script:
    - ./00boot
    - ./configure --enable-doxygen
    - make -j4 distcheck
  only:
    - schedules
    - web
  allow_failure: true

# macOS

nightly:macos:highsierra:
  tags:
    - macos_highsierra
  stage: nightly
  script:
    - ./00boot
    # FIXME: disable building of Octave SWIG bindings until SWIG-4.0.0
    # is available
    - PYTHON=/opt/local/bin/python2.7 ./configure --enable-doxygen
    - make -j4
    - make -j4 check
  dependencies: []
  only:
    - schedules
    - web

nightly:macos:sierra:
  tags:
    - macos_sierra
  stage: nightly
  script:
    - ./00boot
    # FIXME: disable building of Octave SWIG bindings until SWIG-4.0.0
    # is available
    - PYTHON=/opt/local/bin/python2.7 ./configure --enable-doxygen
    - make -j4
    - make -j4 check
  dependencies: []
  only:
    - schedules
    - web

#
# python wheels
#

# Build receipe for standalone wheels on Linux
.nightly:wheel:manylinux: &nightly-wheel-manylinux
  # This container is derived from the official manylinux image provided by
  # python.org (see PEP 513 and PEP 571), and includes all of the LALSuite
  # build-dependencies.
  stage: wheels
  script:
    - PYPREFIX=/opt/python/$(echo ${CI_JOB_NAME} | sed 's/.*:\(.*\)-manylinux.*/\1/')
    # Build wheel
    - ./00boot
    - ./configure PYTHON=${PYPREFIX}/bin/python --enable-mpi ${EXTRA_CONFIG_FLAGS}
    - make -j4 wheel
    # Bundle and fix up dependent shared libraries
    - auditwheel repair wheel/*.whl
    # Test
    - ${PYPREFIX}/bin/virtualenv test
    - source test/bin/activate
    - pip install wheelhouse/*
    - python -c 'import lal, lalframe, lalmetaio'
  dependencies: []
  only:
    - /^lalsuite-v.*$/
    - schedules
  artifacts:
    expire_in: 18h
    paths:
      - wheelhouse

# Build receipe for standalone wheels on macOS
.nightly:wheel:macos: &nightly-wheel-macos
  tags:
    - macos_sierra
  stage: wheels
  script:
    - PYVERS=$(echo ${CI_JOB_NAME} | sed 's/.*:cp\(.\)\(.\).*/\1.\2/')
    # Enter virtualenv so that we have a controlled version of Numpy
    - virtualenv-${PYVERS} env
    - source env/bin/activate
    - pip install git+https://github.com/lpsinger/delocate@fix-duplicate-libs glob2 'numpy==1.14.5;python_version>="3.7"' 'numpy==1.7.0;python_version<"3.7"'
    # Build wheel
    - ./00boot
    - ./configure PYTHON=$(which python${PYVERS}) --enable-mpi --enable-swig-python ${EXTRA_CONFIG_FLAGS} LDFLAGS=-Wl,-headerpad_max_install_names
    - make -j4 wheel
    # Bundle and fix up dependent shared libraries
    - delocate-wheel -v -w wheelhouse wheel/*.whl
    # Test
    - virtualenv-${PYVERS} test
    - source test/bin/activate
    - pip install wheelhouse/*
    - python -c 'import lal, lalframe, lalmetaio'
  dependencies: []
  only:
    - /^lalsuite-v.*$/
    - schedules
  artifacts:
    expire_in: 18h
    paths:
      - wheelhouse

.nightly:wheel:manylinux1: &nightly-wheel-manylinux1
  <<: *nightly-wheel-manylinux
  image: containers.ligo.org/lscsoft/lalsuite-manylinux/manylinux1_x86_64

.nightly:wheel:manylinux2010: &nightly-wheel-manylinux2010
  <<: *nightly-wheel-manylinux
  image: containers.ligo.org/lscsoft/lalsuite-manylinux/manylinux2010_x86_64

# Build wheels for all supported platforms
nightly:wheel:cp27-cp27m-manylinux1:
  <<: *nightly-wheel-manylinux1
nightly:wheel:cp27-cp27mu-manylinux1:
  <<: *nightly-wheel-manylinux1
nightly:wheel:cp34-cp34m-manylinux1:
  <<: *nightly-wheel-manylinux1
nightly:wheel:cp35-cp35m-manylinux1:
  <<: *nightly-wheel-manylinux1
nightly:wheel:cp36-cp36m-manylinux1:
  <<: *nightly-wheel-manylinux1
nightly:wheel:cp37-cp37m-manylinux1:
  <<: *nightly-wheel-manylinux1
nightly:wheel:cp27-cp27m-manylinux2010:
  <<: *nightly-wheel-manylinux2010
nightly:wheel:cp27-cp27mu-manylinux2010:
  <<: *nightly-wheel-manylinux2010
nightly:wheel:cp34-cp34m-manylinux2010:
  <<: *nightly-wheel-manylinux2010
nightly:wheel:cp35-cp35m-manylinux2010:
  <<: *nightly-wheel-manylinux2010
nightly:wheel:cp36-cp36m-manylinux2010:
  <<: *nightly-wheel-manylinux2010
nightly:wheel:cp37-cp37m-manylinux2010:
  <<: *nightly-wheel-manylinux2010
nightly:wheel:cp27-cp27m-macosx:
  <<: *nightly-wheel-macos
nightly:wheel:cp35-cp35m-macosx:
  <<: *nightly-wheel-macos
nightly:wheel:cp36-cp36m-macosx:
  <<: *nightly-wheel-macos
nightly:wheel:cp37-cp37m-macosx:
  <<: *nightly-wheel-macos

deploy:wheel:
  stage: deploy
  image: python
  variables:
    GIT_STRATEGY: none
  script:
    # exit if we're not running in the main namespace
    - if [[ ${CI_PROJECT_PATH} != "lscsoft/lalsuite" ]]; then echo "Not deploying."; exit 0; fi
    # TWINE_USERNAME and TWINE_PASSWORD are provided by CI secret variables
    - pip install twine
    - twine upload wheelhouse/*
  dependencies:
    - nightly:wheel:cp27-cp27m-manylinux1
    - nightly:wheel:cp27-cp27mu-manylinux1
    - nightly:wheel:cp34-cp34m-manylinux1
    - nightly:wheel:cp35-cp35m-manylinux1
    - nightly:wheel:cp36-cp36m-manylinux1
    - nightly:wheel:cp37-cp37m-manylinux1
    - nightly:wheel:cp27-cp27m-manylinux2010
    - nightly:wheel:cp27-cp27mu-manylinux2010
    - nightly:wheel:cp34-cp34m-manylinux2010
    - nightly:wheel:cp35-cp35m-manylinux2010
    - nightly:wheel:cp36-cp36m-manylinux2010
    - nightly:wheel:cp37-cp37m-manylinux2010
    - nightly:wheel:cp27-cp27m-macosx
    - nightly:wheel:cp35-cp35m-macosx
    - nightly:wheel:cp36-cp36m-macosx
    - nightly:wheel:cp37-cp37m-macosx
  only:
    - /^lalsuite-v.*$/
    - schedules

#
# documentation
#

pages:
  image: igwn/lalsuite-dev:stretch
  stage: nightly
  script:
    - ./00boot
    - ./configure --enable-doxygen --prefix=${LAL_DIR}
    - make -j4 install-html
    - cp -r ${LAL_DIR}/share/doc public/
    - pushd public
    - cp lalsuite/index.html index.html
    - sed -i 's/..\/lal/lal/g' index.html
    - popd
  dependencies: []
  artifacts:
    paths:
      - public
  only:
    - master@lscsoft/lalsuite
  except:
    - pushes
    - web
